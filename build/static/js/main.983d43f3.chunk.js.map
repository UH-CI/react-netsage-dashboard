{"version":3,"sources":["DTPicker.js","App.js","serviceWorker.js","index.js"],"names":["App","props","className","label","type","onChange","e","handleChange","value","useState","date","epocDate","Date","parse","startDate","setStartDate","endDate","setEndDate","renderStartDate","setRenerStartDate","renderEndDate","setRenderEndDate","src","DTPicker","console","log","target","onClick","width","height","frameborder","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"wOAgBeA,MAZf,SAAaC,GAIX,OACE,6BACI,0BAAMC,UAAU,SAASD,EAAME,OAC/B,2BAAOD,UAAU,gBAAgBE,KAAK,OAAQC,SAAU,SAACC,GAAD,OANvC,SAACA,GAClBL,EAAMI,SAASC,GAK8CC,CAAaD,IAAIE,MAAOP,EAAMO,UCyDpFR,MAhEf,WAAgB,IAAD,EAEqBS,mBAAS,CACzCC,KAAO,aACPC,SAAWC,KAAKC,MAAM,gBAJX,mBAENC,EAFM,KAEKC,EAFL,OAMiBN,mBAAS,CACrCC,KAAM,aACNC,SAAWC,KAAKC,MAAM,gBARX,mBAMNG,EANM,KAMGC,EANH,OAW+BR,mBAASK,EAAUH,UAXlD,mBAWPO,EAXO,KAWUC,EAXV,OAY6BV,mBAASO,EAAQL,UAZ9C,mBAYNS,EAZM,KAYSC,EAZT,KAuCb,OACE,6BACE,yBAAKC,IAAI,0EAA0EpB,UAAU,WAC7F,yBAAKA,UAAU,eAEb,kBAACqB,EAAD,CAAUpB,MAAM,aAAaD,UAAU,gBAAgBG,SAlB/B,SAACC,GAC7BkB,QAAQC,IAAI,2BAA4BnB,EAAEoB,OAAOlB,OACjDO,EAAa,CACXL,KAAMJ,EAAEoB,OAAOlB,MACfG,SAAUC,KAAKC,MAAMP,EAAEoB,OAAOlB,UAc6DA,MAAOM,EAAUJ,OAC1G,kBAACa,EAAD,CAAUpB,MAAM,WAAWD,UAAU,gBAAgBG,SA5B/B,SAACC,GAC3BkB,QAAQC,IAAI,yBAA2BnB,EAAEoB,OAAOlB,OAChDS,EAAW,CACTP,KAAMJ,EAAEoB,OAAOlB,MACfG,SAAUC,KAAKC,MAAMP,EAAEoB,OAAOlB,UAwByDA,MAAOQ,EAAQN,OACpG,4BAAQN,KAAK,SAASF,UAAU,YAAYyB,QAZ7B,WACnBR,EAAkBL,EAAUH,UAC5BU,EAAiBL,EAAQL,YAUrB,WAEF,6BACA,yBAAKT,UAAU,WACf,4BAAQoB,IAAK,sKAAsKJ,EAAgB,OAAOE,EAAc,aAAcQ,MAAM,OAAOC,OAAO,MAAMC,YAAY,MAC5Q,4BAAQR,IAAK,sKAAsKJ,EAAgB,OAAOE,EAAc,aAAcQ,MAAM,OAAOC,OAAO,OAAOC,YAAY,MAC7Q,sEACA,4BAAQR,IAAK,kLAAkLJ,EAAgB,OAAOE,EAAc,cAAeQ,MAAM,OAAOC,OAAO,MAAMC,YAAY,MACzR,sEACA,4BAAQR,IAAK,kLAAkLJ,EAAgB,OAAOE,EAAc,cAAeQ,MAAM,OAAOC,OAAO,MAAMC,YAAY,SC/C3QC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxB,QAAQwB,MAAMA,EAAMC,c","file":"static/js/main.983d43f3.chunk.js","sourcesContent":["\r\nimport React from 'react';\r\nimport './App.css'; \r\n\r\nfunction App(props) {\r\n    const handleChange = (e)=>{\r\n        props.onChange(e);\r\n    }\r\n  return (\r\n    <div>\r\n        <span className=\"label\">{props.label}</span>\r\n        <input className=\"dateComponent\" type=\"date\"  onChange={(e)=>handleChange(e)} value={props.value}></input>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React, {useState, useEffect} from 'react';\r\nimport DTPicker from './DTPicker'; \r\nimport \"./App.css\"; \r\n\r\nfunction App() {\r\n\r\n  const [startDate, setStartDate] = useState({\r\n    date : \"2020-07-19\", \r\n    epocDate : Date.parse(\"2020-07-19\")\r\n  })\r\n  const [endDate, setEndDate] = useState({\r\n    date :\"2020-10-19\", \r\n    epocDate : Date.parse(\"2020-10-19\")\r\n  })\r\n\r\n  const[renderStartDate, setRenerStartDate] = useState(startDate.epocDate); \r\n  const [renderEndDate, setRenderEndDate] = useState(endDate.epocDate); \r\n\r\n  \r\n\r\n\r\n  const handleEndDateChange = (e) =>{\r\n    console.log(\"End Date Changed to : \" + e.target.value); \r\n    setEndDate({\r\n      date: e.target.value, \r\n      epocDate: Date.parse(e.target.value)\r\n    })\r\n  }\r\n\r\n  \r\n  const handleStartDateChange = (e) =>{\r\n    console.log(\"Start date changed to : \" +e.target.value); \r\n    setStartDate({\r\n      date: e.target.value, \r\n      epocDate: Date.parse(e.target.value)\r\n    })\r\n  }\r\n\r\n  const handleUpdate = ()=>{\r\n    setRenerStartDate(startDate.epocDate);\r\n    setRenderEndDate(endDate.epocDate); \r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <img src=\"https://www.hawaii.edu/wp/wp-content/uploads/2016/05/header_oneline.png\" className=\"uhlogo\"></img>\r\n      <div className=\"DateSection\">\r\n      \r\n        <DTPicker label=\"Start Date\" className=\"dateComponent\" onChange ={handleStartDateChange} value={startDate.date} ></DTPicker>\r\n        <DTPicker label=\"End Date\" className=\"dateComponent\" onChange ={handleEndDateChange} value={endDate.date}></DTPicker>\r\n        <button type=\"button\" className=\"updateBtn\" onClick={handleUpdate}>UPDATE</button>\r\n      </div>\r\n      <hr/>\r\n      <div className=\"content\">\r\n      <iframe src={\"https://portal.netsage.global/grafana/d-solo/WNn1qyaiz/flows-by-science-discipline?orgId=2&var-Sensors=All&var-discipline=MPS.Astronomy&var-country_scope=All&from=\"+renderStartDate+\"&to=\"+renderEndDate+\"&panelId=7\"} width=\"100%\" height=\"800\" frameborder=\"0\"></iframe>\r\n      <iframe src={\"https://portal.netsage.global/grafana/d-solo/WNn1qyaiz/flows-by-science-discipline?orgId=2&var-Sensors=All&var-discipline=MPS.Astronomy&var-country_scope=All&from=\"+renderStartDate+\"&to=\"+renderEndDate+\"&panelId=9\"} width=\"100%\" height=\"1400\" frameborder=\"0\"></iframe> \r\n      <h4>Top Flows Sent by University of Hawaii</h4>\r\n      <iframe src={\"https://portal.netsage.global/grafana/d-solo/QfzDJKhik/flow-data-per-organization?orgId=2&var-Sensors=All&var-Organization=University%20of%20Hawaii&var-country_scope=All&from=\"+renderStartDate+\"&to=\"+renderEndDate+\"&panelId=21\"} width=\"100%\" height=\"500\" frameborder=\"0\"></iframe> \r\n      <h4>Top Flows Sent to University of Hawaii</h4>\r\n      <iframe src={\"https://portal.netsage.global/grafana/d-solo/QfzDJKhik/flow-data-per-organization?orgId=2&var-Sensors=All&var-Organization=University%20of%20Hawaii&var-country_scope=All&from=\"+renderStartDate+\"&to=\"+renderEndDate+\"&panelId=32\"} width=\"100%\" height=\"500\" frameborder=\"0\"></iframe>\r\n      </div>\r\n    \r\n    \r\n    </div>\r\n    \r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}